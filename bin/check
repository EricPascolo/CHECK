#!/usr/bin/env python

#
# CHECK
#
# @authors : Eric Pascolo
#
# Copyright (C) 2017 
#

from __future__ import print_function
from checklib.inout import commandline
from checklib.common import utils
from checklib.inout import checklog
from checklib.core import checkobj_core
from datetime import datetime
import sys
import os
import logging

import uuid
####--------------------------------------------------------------------------------------------------------------

__author__ = "Eric Pascolo"
__copyright__ = "Copyright 2020"
__credits__ = [""]
__license__ = "GNU Affero GPL v.3"
__version__ = "0.2.2"
__email__ = "eric.pascolo@cineca.it"
__status__ = "Development"


if sys.version_info[:2] < (2,7):
    v_info = sys.version_info[:3]
    sys.exit("CHECK requires Python 2.7 or higher."
             "This is Python %d.%d.%d." % v_info)

##read commandline flag
cl_args = commandline.cl_convert_to_dict(commandline.cl_parser())

#generate uuid of this run if is son process take 
#from CL and delete in any case master_id entry
if cl_args["master_id"] == "-999":
    run_id = uuid.uuid4().hex
    del cl_args["master_id"]
else:
    run_id = uuid.UUID(cl_args["master_id"]).hex
    

#set basic logger
logger = logging.getLogger("basic")
logger.critical("**** CHECK "+__version__ +" - "+utils.get_name_of_nodes()+ \
     " - "+datetime.now().strftime("%d/%m/%Y %H:%M:%S")+" - "+str(run_id))


##init check setting object
checkcore = checkobj_core.check_core(cl_args,run_id)
# if module interface is defined then set checkcore.module function
if "module_env_py_interface" in checkcore.setting:
    exec(open(checkcore.setting["module_env_py_interface"]).read())
    logger.info("Using modules")
    logger.info(module("-V", "list"))      
    checkcore.set_module_function(module)


## master
if "master" in checkcore.setting:
    from checklib.master import master_runner
    master_runner.main(checkcore)

## daemon 
elif "daemon" in checkcore.setting:
    from checklib.daemon import daemon_manager
    Dcheck = daemon_manager.deamon_manager(checkcore)
    Dcheck.command(cl_args)

## slave
elif checkcore.setting["check"] != "-999":
    from checklib.slave import slave_runner
    slave_runner.main(checkcore)

else:
    pass

logger.critical("**** CHECK STOP - "+utils.get_name_of_nodes()+ \
     " - "+datetime.now().strftime("%d/%m/%Y %H:%M:%S") +" - "+ str(run_id))

####--------------------------------------------------------------------------------------------------------------
